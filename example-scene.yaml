# В структуре "objects" перечислены объекты, 
# определенные для данного сценария. Объектами могут быть:
# игрок, неподвижные безжизненные NPC. 

# Общая вид любой структуры объекта:
# <object id>: 
#   type: <object type>
#   x: <starting position of X-axis>
#   y: <starting position of Y-axis>
# Если поля не указаны явно, то их значения инициализируются 
# значениями по умолчанию (не для всех полей существуют такие значения).
# По умолчанию поля x и y равны нулю.

# Для любого объекта определены методы, обращение к ним возможно через 
# символ определения контекста '.':
# ("bool" означает, что данный метод используется только в качестве условия)
# ("void" означает, что данный метод используется только в качестве действия) 
# -----/ bool in(x y) - возращает true, если объект находится в позиции (x, y);

objects:
 player:
  type: Dwarf
  x: 1
  y: 1
  
# События представляют собой последовательность действий,
# которые могут быть выполнены, если удовлетворяют своему условию.
# Проверка событий происходит каждый ход.
# Структура "events" задает список этих событий вместе с их определениями.

# Общий вид любой структуры события:
# <event id>
#   if: [<condition>, <condition>, ..., <condition>] 
#   title:   <window title>
#   message: <window message>
#   size: <window size>
#   image: <image in the window>
#   image position: <image position>
#   items:
#     - 
#       label: <item label>
#       do: [<item action>, <item action>, ..., <item action>]
#     -
#       label: ...
#       do: ...
#     - 
#       ...
#
#   do: [<action>, <action>, ..., <action>]
#
# Если не указаны условия (структура "if"), то событие выполняется каждый ход.
# Если указаны условия, то, событие выполнится, если выполняются одновременно все условия.
# Ключевое действие "or" (поле <condition>) позволяет управлять списком условий,
# разделяя список условий на две части, выполнение любой части ведет к выполнению события,
# Поле "title" устанавливает заголовок окна с сообщением, по умолчанию - "Event".
# Полe "size" устанавливает размер этого окна, по умолчанию - "Small"
# (доступны три варианта: "Small", "Average", "Full)
# Поле "image" устанавливает ASCII-картинку, которая в окне с сообщением, по умолчанию картинка отсутствует.
# Список доступных картинок см. внизу.
# Поле "image position" - устанавливает позицию картиники, по умолчанию - вверху, над сообщением ("Top")
# Варианты: "Top", "Left".
# Поле "message" устанавливает сообщение, выводящееся, при выполнении события. Если
# это поле оставить пустым, то сообщение не выведется, при этом выполнятся действия из поля "do"
# 
# Методы определенные для каждого события:
# -----/ bool happened() - возвращает true, если событие уже произошло;

events:
  ev1:                                        
    if: [ ev1.happened()!, player.in(2 2) ] 
    title:   "Example"                           
    size:    "Average"
    message: "Hello, this is example scenario!" 
    image: "Pikeman"
    image position: "Left"
    items:                                     
       -                                    
         label: "I walk here a little."                                                       
         do:    [ window.close() ]  
       -
         label: "I want to leave."              
         do:    [ scenario.exit() ]                                      
  ev2:
    if: [ ev1.happened(), player.in(1 1) ]
    title:   "Ha ha!"
    size:    "Average"
    message: "\"ev1\" was happened!"
    items:
      -
        label: "OK"
        do:    [ scenario.exit() ]
        
# "window" и "scenario" зарезервированные имена, их нельзя 
# использовать при идентификации объектов/событий/карт.

# Зарезервированное имя "window" позволяет обращаться 
# к методам текущего окна (в частности, к выскакивающиму сообщению-событию) 
# через символ разрешения контекста '.':
# -----/ void close() - закрывает текущее окно;

# Зарезервированное имя "scenario" позволяет обращаться к 
# методам определенных для всего сценария:
# -----/ void exit() - выход в главное меню (подразумевает удаление всего текущего стека окон);

# Структура "maps" определяет список карт сценария.

# Общий вид структуры карты:
# <map id>
#   width:  <map width>
#   height: <map height>
#   text:   <map>

maps:
 map1:
  width: 59
  height: 18
  text: |
   ###########################################################
   #...........#.............................................#
   #...........#........#....................................#
   #..........HUI........#...................................#
   #....####..............#..................................#
   #.......#.......................#####################.....#
   #.......#...........................................#.....#
   #.......#...........##..............................#.....#
   #####........#......##..........##################..#.....#
   #...#...........................#................#..#.....#
   #...#............#..............#................#..#.....#
   #...............................#..###############..#.....#
   #...............................#...................#.....#
   #...............................#...................#.....#
   #...............................#####################.....#
   #.........................................................#
   #.........................................................#
   ###########################################################
   
# Список картинок:
# "cow", "centaur", "pikeman", "mountains"